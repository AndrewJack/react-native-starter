// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.0-beta05'
        classpath 'io.fabric.tools:gradle:1.25.4'
        classpath 'com.google.gms:google-services:4.0.2'
        classpath 'com.google.firebase:firebase-plugins:1.1.5'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            // Local Maven repo containing AARs with JSC library built for Android
            url "$rootDir/../node_modules/jsc-android/dist"
        }
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url "$rootDir/../node_modules/react-native/android"
        }
        google()
    }

    // Disable lint for other projects
    tasks.whenTaskAdded { task ->
        if (task.name.contains("lint") && !task.project.name.equals("app")) {
            task.enabled = false
        }
    }
}

ext {
    buildToolsVersion = "27.0.3"
    minSdkVersion = 21
    compileSdkVersion = 27
    targetSdkVersion = 27
    supportLibVersion = "27.1.1"

    jscVersion = "r224109"
    frescoVersion = '1.9.0'
    okHttpVersion = '3.10.0'
    playServicesBaseVersion = '15.0.1'
    tagManagerVersion = '16.0.1'
    firebaseCoreVersion = '16.0.1'
    firebaseAnalyticsVersion = '16.0.1'
    firebaseMessagingVersion = '17.1.0'
    firebaseConfigVersion = '16.0.0'
    firebasePerfVersion = '16.0.0'

    def packageVersion = getVersionArray()
    versionMajor = packageVersion[0]
    versionMinor = packageVersion[1]
    versionPatch = packageVersion[2]

    reactNativeVersion = getReactNativeVersion()
}

subprojects {
    project.configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                // Force all of the primary support libraries to use the same version.
                def versionSelector = details.requested
                if (versionSelector.group == 'com.android.support' && !versionSelector.name.contains('multidex')) {
                    details.useVersion rootProject.ext.supportLibVersion
                } else if (versionSelector.group == 'com.google.firebase' && versionSelector.name == 'firebase-core') {
                    details.useVersion rootProject.ext.firebaseCoreVersion
                } else if (versionSelector.group == 'com.google.firebase' && versionSelector.name == 'firebase-analytics') {
                    details.useVersion rootProject.ext.firebaseAnalyticsVersion
                } else if (versionSelector.group == 'com.google.firebase' && versionSelector.name == 'firebase-messaging') {
                    details.useVersion rootProject.ext.firebaseMessagingVersion
                } else if (versionSelector.group == 'com.google.firebase' && versionSelector.name == 'firebase-config') {
                    details.useVersion rootProject.ext.firebaseConfigVersion
                } else if (versionSelector.group == 'com.google.firebase' && versionSelector.name == 'firebase-perf') {
                    details.useVersion rootProject.ext.firebasePerfVersion
                } else if (versionSelector.group == 'com.google.android.gms' && versionSelector.name == 'play-services-base') {
                    details.useVersion rootProject.ext.playServicesBaseVersion
                } else if (versionSelector.group == 'com.facebook.react' && versionSelector.name == 'react-native') {
                    details.useVersion rootProject.ext.reactNativeVersion
                } else if (versionSelector.group == 'com.squareup.okhttp3') {
                    details.useVersion rootProject.ext.okHttpVersion
                } else if (versionSelector.group == 'com.facebook.fresco') {
                    details.useVersion rootProject.ext.frescoVersion
                } else if (versionSelector.group == 'org.webkit' && versionSelector.name == 'android-jsc') {
                    details.useVersion rootProject.ext.jscVersion
                }
            }
        }
    }

    afterEvaluate { project ->
        if (!project.name.equalsIgnoreCase("app")
                && project.hasProperty("android")) {
            android {
                compileSdkVersion rootProject.ext.compileSdkVersion
                buildToolsVersion rootProject.ext.buildToolsVersion
                defaultConfig {
                    minSdkVersion rootProject.ext.minSdkVersion
                    targetSdkVersion rootProject.ext.targetSdkVersion
                }
            }
        }
    }
}

task clean(type: Delete) {
    group 'build'
    delete rootProject.buildDir
}

import groovy.json.JsonSlurper

def getPackageJson() {
    def inputFile = new File(rootProject.projectDir, "../package.json")
    return new JsonSlurper().parseText(inputFile.text)
}

def getPackageVersion() {
    def packageJson = getPackageJson()
    return packageJson["version"]
}

def getVersionArray() { // major [0], minor [1], patch [2]
    def (major, minor, patch) = getPackageVersion().tokenize('.')
    return [Integer.parseInt(major), Integer.parseInt(minor), Integer.parseInt(patch)] as int[]
}

def getReactNativeVersion() {
    def packageJson = getPackageJson()
    return packageJson.dependencies["react-native"].replace('^', '').replace('~', '')
}